<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<article lang="">
  <para>CocoIDE: Coco de Mer 8 Integrated Development Environment Software Manual</para>
  <para>Installation and User Guide for Windows, Linux and Mac</para>
  <para/>
  <sect1>
    <title>Introduction</title>
    <para>This manual provides instructions for installing and using the Coco De Mere 8 (CDM8) integrated development environment software CocoIDE, on your own PC or Laptop. CocoIDE is programmed in Python, and allows you to easily edit, develop and test your assembler programs for the CDM8 microprocessor system. You can  run the CocoIDE software using your choice of Windows, Linux or Mac operating systems.  This manual will guide you through the process of installing the CDM8 development software on your own PC or Laptop, and through the CDM8 program development process by using an example: Writing and testing your first CDM8 assembler program, “HelloWorld.asm”. <footnote><para>Note, it is traditional for any specific programming language tutorial to start with a simple program that simply displays “Hello World”, so this manual takes the same approach for the CDM8 system.</para></footnote></para>
    <para>The Computer Science PC Labs have CocoIDE already installed. You will also be expected to work independently through a tailored set of CDM8 Programming exercises, and make your independent program submissions via email to the main CocoMaRo (CDM8 Marking Robot). More details will be provided in Lectures and Tutorials. </para>
  </sect1>
  <sect1><title>Installation:</title>stalla<para>The general procedure for installation is the same for all platforms. However, configuring the software to run from the command line, and also setting up to it use from the various program menus is different for each platform. Details will be provided for each platform in the sections below</para></sect1>
  <sect1><title>Quick Start: Using CocoIDE as an Integrated Development Environment for CDM8 Programming and Testing</title>Quick Start: CocoIDEnIntegrated nvironmentProgramming and Testing<para/><para>Once you have installed CocoIDE (including Python and Logisim) you are now equipped for developing assembler programs for the CDM8 microprocessor system. This part of the manual is a tutorial that guides you step by step through the process of creating, compiling executing and testing your first CDM8 assembler program. Various useful features of cocoIDE are described and illustrated by example at suitable points in this tutorial.</para><para>The top left pane is a text editor which is oriented towards writing, loading and saving CDM8 Assembly language programs. Unlike a word processor package (such as MSWord etc.) it does not embed formatting, different font, text size and style information in the files which are produced. The text files produced are essentially stripped down versions, containing only bare textual information. These bare text files are therefore known as “plain text” files. Most programming languages expect their source code to be written by the human programmer as plain text and saved in a file on disk. For a plain text file, which is not meant to be run or compiled as a program, it is customary to give the file a name ending with nnn.txt (or nnn.TXT, where nnn is the name of the file), and the .txt “extension” indicates that the file is plain text (e.g. readme.txt). For specific programming language text files (also known as “source code”), it is usual to use a different extension that indicates what programming language the “source code” file is written in. For example, common program source code file extensions include .py (Python), .bas (Basic), .java (Java),  .c (C ), .cpp (C++), .lsp (Lisp) and there are many others. CocoIDE recognises any plain text file with an extension of .asm as a CDM8 assembly language listing file. Other features also allow it to be used as an IDE for CDM8 Assembler program development. </para><para/></sect1>
  <sect1><title>A First CDM8 Assembly Language Program</title>A Assembly Language <para>Type the program listing below in Fig 3 into the Editor pane of CocoIDE. Remember to save your program often as you type it in,</para><para/><para>Do not worry if you do not understand all (any!) of the program statements and key words at the moment. Over the next few weeks you will get to know the CDM8 Assembly Language in more detail. Be aware that from any hash character (#) to the end of the line indicates a comment which is greyed out and will be ignored by the CDM8 compiler. It is good programming practice to use comments to explain what your code is doing, make notes about changes, problems etc. and to document your code. The bold words, highlighted in purple, black, green and blue are the actual assembly program statements which will be compiled into executable code. Try compiling your code as you enter every few lines, in order to eliminate any syntax errors as you go. Generally the assembler will indicate the line number and type of any errors detected. When you have typed the whole program in and compiled (Compile/Load icon) it successfully, it is ready to test in the CDM8 emulator pane. Note, handy key combinations are ctrl+z=undo, ctrl+y=redo, ctrl+c= copy, ctrl+v=paste, and ctrl-t=Toggle breakpoint (or double click in the Machine List opcode pane). These can mostly be accessed from the drop down menues, as well as by right clicking the mouse in the approapriate pane.</para><para>When you “Compile” your program successfully, the program will automatically load the “Compiled” program into the CDM8 Emulator pane's memory, ready for you to run and test (See Fig 1). For this first test, you need only concern yourself with the Memory View pane (Fig 1, D) and the Control Buttons (Fig 2, C, D and E). The Register pane (Fig 1, D) shows various registers used by the CPU – you will learn more about these over future weeks!</para><para>As the memory of the CDM8 is only 256 Bytes (0x00 to 0xff), the current memory is displayed as an indexed table arranged as rows (Most Significant Digit of memory address) and columns (Least Significant Digit memory address). At each memory row/column address location in the table, the current value of that memory location is shown. As you run your program you can see how the contents of the memory cells change. Note any memory cell that is written to by your program will be highlighted in red. If you have used a “dc” or “ds” instruction in your program, these memory locations will also be displayed in the Watch pane as well.   You can either run one “Step” at a time and examine in detail what happens to the CDM8 memory at each program line, or “Run” your program at full speed, in which case you will just see the final memory contents. It is also possible to run your program in “Slow” mode, in which case you will see how the memory changes in slow motion. When your program has run to a “halt” instruction (D4) the “Compile/Reset”  button will re-initialise your program in the CDM8 memory with the original program (memory image). The current machine instruction location to be executed is highlighted in a rather fetching shade of Yellow!.</para><para>Moving the mouse over memory display table, a pop-up window will show the content of any memory cell in the most common data formats: Hexadecimal, ASCII Character, Signed and Unsigned Decimal, and as a Binary bitstring. By double clicking on a line in the Machine op-code display pane you can set “Break Points” where the program will pause execution. This useful for longer running programs, as program execution will pause at these points, allowing you to inspect the memory and register values. At any time you can also “Step” or “Slow” “Run” through following sections of code to the next “break point” or to end of the program (d4 = halt instruction).</para><para>When you “Run” your program from CocoIDE, the Editor and Machine Code panes will highlight the  apropriate lines of the listing of your original assembly code and machine codes. This will provide an indication how and where your program statements and data are actually loaded into the CDM8 processor memory, and allow you to see the current machine code being executed and see what it is in relation to your original program listing. </para><para>Normally you will receive and submit your own personally tailored series of programming exercises by email. More details will be provided in timetabled sessions.</para><para/><para/><para/><para/></sect1>
</article>
